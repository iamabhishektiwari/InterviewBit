Given an array of integers, A of length N, find the length of longest subsequence which is first increasing then decreasing.

Input Format:

The first and the only argument contains an integer array, A.
Output Format:

Return an integer representing the answer as described in the problem statement.
Constraints:

1 <= N <= 3000
1 <= A[i] <= 1e7
Example:

Input 1:
    A = [1, 2, 1]

Output 1:
    3

Explanation 1:
    [1, 2, 1] is the longest subsequence.

Input 2:
    [1, 11, 2, 10, 4, 5, 2, 1]

Output 2:
    6
    
Explanation 2:
    [1 2 10 4 2 1] is the longest subsequence.


Solution:

int Solution::longestSubsequenceLength(const vector<int> &a) {
    int l = a.size();
    int inc[l];
    int dec[l];
    int val = 0;
    for(int i=0;i<l;i++){
        inc[i]=0;
        dec[i]=0;
    }
    for(int i=0;i<a.size();i++){
        for(int j=0;j<i;j++){
            if(a[j]<a[i])
                inc[i]=max(inc[j]+1,inc[i]);
        }
    }
    for(int i=l-1;i>=0;i--){
        for(int j=l-1;j>i;j--){
            if(a[j]<a[i])
                dec[i]=max(dec[i],dec[j]+1);
        }
    }
    for(int i=0;i<l;i++){
        val = max(val,inc[i]+dec[i]+1);
    }
    return val;
    
}